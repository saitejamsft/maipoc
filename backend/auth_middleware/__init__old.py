# """
# auth middleware
# """
# import json
# import time
# from six.moves.urllib.request import urlopen
# from jose import jwt

# API_AUDIENCE = "583c8d92-37c2-48f7-b918-3a7156b66354"
# TENANT_ID = "72f988bf-86f1-41af-91ab-2d7cd011db47"
# cached = {"last": 1, "data": {}}

# # Error handler
# """
# for extracting the token from header
# """


# def get_token_auth_header(headers):
#     """Obtains the Access Token from the Authorization Header
#     """
#     auth = headers.get("Authorization", None)
#     if not auth:
#         return {"code": 401,
#                 "description": "Authorization header is expected"}

#     parts = auth.split()

#     if parts[0].lower() != "bearer":
#         return {"code": 401,
#                 "description": "Authorization header must start with Bearer"}
#     elif len(parts) == 1:
#         return {"code": 401,
#                 "description": "Token not found"}
#     elif len(parts) > 2:
#         return {"code": 401,
#                 "description": "Authorization header must be Bearer token"}
#     token = parts[1]
#     return {"token": token, "code": 200}

# # def requires_auth(header):
# #     """
# #     for authenicating the API using token generated by msal
# #     verify the token passed in header and
# #     return response
# #     """
# #     return {
# #         "name": "name",
# #         "code": 200,
# #         "user name": "preferred_username"
# #     }


# def requires_auth(header):
#     """
#     for authenicating the API using token generated by msal
#     verify the token passed in header and
#     return response
#     """
#     # return {
#     #         "name": "name",
#     #         "code": 200,
#     #         "user name": "preferred_username"
#     #     }
#     try:
#         # to get token from header
#         token_response = get_token_auth_header(header)
#         if token_response["code"] == 401:
#             return token_response
#         token = token_response["token"]
#         # to get the keys to validate token and using cached keys for 20mins
#         if cached["last"] != 1 and cached["last"] > time.time()-1200:
#             jwks = cached["data"]
#         else:
#             jsonurl = urlopen("https://login.microsoftonline.com/" +
#                               TENANT_ID + "/discovery/v2.0/keys")
#             jwks = json.loads(jsonurl.read())
#             cached["data"] = jwks
#             cached["last"] = time.time()

#         # print(cached["last"])
#         # print(time.time())
#         unverified_header = jwt.get_unverified_header(token)
#         rsa_key = {}
#         for key in jwks["keys"]:
#             if key["kid"] == unverified_header["kid"]:
#                 rsa_key = {
#                     "kty": key["kty"],
#                     "kid": key["kid"],
#                     "use": key["use"],
#                     "n": key["n"],
#                     "e": key["e"]
#                 }
#     except Exception as err:
#         print(err)
#         return {"code": 401,
#                 "description": "Unable to parse authentication token."}
#     if rsa_key:
#         try:
#             # decoding the token
#             payload = jwt.decode(
#                 token,
#                 rsa_key,
#                 algorithms=["RS256"],
#                 audience=API_AUDIENCE,
#                 issuer=f"https://login.microsoftonline.com/{TENANT_ID}/v2.0"
#             )
#         except jwt.ExpiredSignatureError:
#             return {
#                 "name": "name",
#                 "code": 200,
#                 "user name": "preferred_username"
#             }
#             #  return {"code": 401,
#             #                  "description": "token is expired"}
#         except jwt.JWTClaimsError:
#             return {"code": 401,
#                     "description": "incorrect claims, please check the audience and issuer"}
#         except Exception:
#             return {"code": 401,
#                     "description": "Unable to parse authentication token."}
#         return {
#             "name": payload["name"],
#             "code": 200,
#             "user name": payload["preferred_username"],
#             "roles": payload["roles"]
#         }
#     return {"code": 401,
#             "description": "Unable to find appropriate key"}
